"use strict";var assert=require("assert"),lex=require("beagle-lexer"),parse=require("beagle-parser"),walk=require("../");test("simple",function(){var a=walk(parse(lex(".my-class foo")),function(a,b){"Text"===a.type&&b({type:"Text",val:"bar",line:a.line,column:a.column})},function(){// called before walking the children of `node`
// to replace the node, call `replace(newNode)`
});expect(a).toEqual(parse(lex(".my-class bar")))}),describe("replace([])",function(){test("block flattening",function(){var a=[],b=walk({type:"Block",nodes:[{type:"Block",nodes:[{type:"Block",nodes:[{type:"Text",val:"a"},{type:"Text",val:"b"}]},{type:"Text",val:"c"}]},{type:"Text",val:"d"}]},function(b,c){"Text"===b.type&&(a.push("before "+b.val),"a"===b.val&&(assert(c.arrayAllowed,"replace.arrayAllowed set wrongly"),c([{type:"Text",val:"e"},{type:"Text",val:"f"}])))},function(b,c){"Block"===b.type&&c.arrayAllowed?c(b.nodes):"Text"===b.type&&a.push("after "+b.val)});expect(b).toEqual({type:"Block",nodes:[{type:"Text",val:"e"},{type:"Text",val:"f"},{type:"Text",val:"b"},{type:"Text",val:"c"},{type:"Text",val:"d"}]}),assert.deepEqual(a,["before a","before e","after e","before f","after f","before b","after b","before c","after c","before d","after d"],"before() and after() called incorrectly: "+JSON.stringify(a))}),test("adding include filters",function(){var a=walk(parse(lex("include:filter1:filter2 file")),function(a,b){if("IncludeFilter"===a.type)if(assert(b.arrayAllowed),"filter1"===a.name){b([{type:"IncludeFilter",name:"filter3",attrs:[],line:a.line,column:a.column},{type:"IncludeFilter",name:"filter4",attrs:[],line:a.line,column:a.column+7+1}])}else"filter2"===a.name&&b([])});expect(a).toEqual(parse(lex("include:filter3:filter4 file")))}),test("fails when parent is not Block",function(){walk(parse(lex("p content")),function(a,b){"Block"===a.type&&a.nodes[0]&&"Text"===a.nodes[0].type&&(assert(!b.arrayAllowed,"replace.arrayAllowed set wrongly"),assert.throws(function(){b([])}))})})});