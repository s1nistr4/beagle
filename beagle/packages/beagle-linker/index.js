"use strict";var assert=require("assert"),walk=require("beagle-walk");function error(){throw require("beagle-error").apply(null,arguments)}module.exports=link;function link(a){assert("Block"===a.type,"The top level element should always be a block");var b=null;if(a.nodes.length){var c="Extends"===a.nodes[0].type;checkExtendPosition(a,c),c&&(b=a.nodes.shift())}if(a=applyIncludes(a),a.declaredBlocks=findDeclaredBlocks(a),b){var d=[],e=[];a.nodes.forEach(function b(a){"NamedBlock"===a.type?e.push(a):"Block"===a.type?a.nodes.forEach(b):"Mixin"===a.type&&!1===a.call?d.push(a):error("UNEXPECTED_NODES_IN_EXTENDING_ROOT","Only named blocks and mixins can appear at the top level of an extending template",a)});var f=link(b.file.ast);extend(f.declaredBlocks,a);var g=[];return walk(f,function(a){"NamedBlock"===a.type&&g.push(a.name)}),e.forEach(function(a){-1===g.indexOf(a.name)&&error("UNEXPECTED_BLOCK","Unexpected block "+a.name,a)}),Object.keys(a.declaredBlocks).forEach(function(b){f.declaredBlocks[b]=a.declaredBlocks[b]}),f.nodes=d.concat(f.nodes),f.hasExtends=!0,f}return a}function findDeclaredBlocks(a)/*: {[name: string]: Array<BlockNode>}*/{var b={};return walk(a,function(a){"NamedBlock"===a.type&&"replace"===a.mode&&(b[a.name]=b[a.name]||[],b[a.name].push(a))}),b}function flattenParentBlocks(a,b){return b=b||[],a.forEach(function(a){a.parents&&flattenParentBlocks(a.parents,b),b.push(a)}),b}function extend(a,b){var c={};walk(b,function(b){if("NamedBlock"===b.type){if(c[b.name]===b.name)return b.ignore=!0;c[b.name]=b.name;var d=a[b.name]?flattenParentBlocks(a[b.name]):[];d.length&&(b.parents=d,d.forEach(function(a){switch(b.mode){case"append":a.nodes=a.nodes.concat(b.nodes);break;case"prepend":a.nodes=b.nodes.concat(a.nodes);break;case"replace":a.nodes=b.nodes}}))}},function(a){"NamedBlock"!==a.type||a.ignore||delete c[a.name]})}function applyIncludes(a){return walk(a,function(a,b){"RawInclude"===a.type&&b({type:"Text",val:a.file.str.replace(/\r/g,"")})},function(a,b){if("Include"===a.type){var c=link(a.file.ast);c.hasExtends&&(c=removeBlocks(c)),b(applyYield(c,a.block))}})}function removeBlocks(a){return walk(a,function(a,b){"NamedBlock"===a.type&&b({type:"Block",nodes:a.nodes})})}function applyYield(a,b){function c(a){for(var b=a,d=0;d<a.nodes.length;d++)a.nodes[d].textOnly||("Block"===a.nodes[d].type?b=c(a.nodes[d]):a.nodes[d].block&&a.nodes[d].block.nodes.length&&(b=c(a.nodes[d].block)));return b}if(!b||!b.nodes.length)return a;var d=!1;return a=walk(a,null,function(a){"YieldBlock"===a.type&&(d=!0,a.type="Block",a.nodes=[b])}),d||c(a).nodes.push(b),a}function checkExtendPosition(a,b){var c=!1;walk(a,function(a){"Extends"===a.type&&(b&&!c?c=!0:error("EXTENDS_NOT_FIRST","Declaration of template inheritance (\"extends\") should be the first thing in the file. There can only be one extends statement per file.",a))})}