"use strict";var runtime=require("../"),build=require("../build"),wrap=require("../wrap");function addTest(a,b){test(a,function(){b(runtime[a]),b(Function("",build([a])+";return pug_"+a+";")()),b(wrap("function t() {return pug."+a+";}","t")())})}addTest("attr",function(a){var b=String.prototype,c=b.toJSON;// (key, val, escaped, terse)
// Boolean Attributes
// Date Attributes
// Custom JSON Attributes
// JSON Attributes
// Number attributes
// String attributes
b.toJSON=function(){return JSON.stringify(this)},expect(a("key",!0,!0,!0)).toBe(" key"),expect(a("key",!0,!1,!0)).toBe(" key"),expect(a("key",!0,!0,!1)).toBe(" key=\"key\""),expect(a("key",!0,!1,!1)).toBe(" key=\"key\""),expect(a("key",!1,!0,!0)).toBe(""),expect(a("key",!1,!1,!0)).toBe(""),expect(a("key",!1,!0,!1)).toBe(""),expect(a("key",!1,!1,!1)).toBe(""),expect(a("key",null,!0,!0)).toBe(""),expect(a("key",null,!1,!0)).toBe(""),expect(a("key",null,!0,!1)).toBe(""),expect(a("key",null,!1,!1)).toBe(""),expect(a("key",void 0,!0,!0)).toBe(""),expect(a("key",void 0,!1,!0)).toBe(""),expect(a("key",void 0,!0,!1)).toBe(""),expect(a("key",void 0,!1,!1)).toBe(""),expect(a("key",new Date("2014-12-28T16:46:06.962Z"),!0,!0)).toBe(" key=\"2014-12-28T16:46:06.962Z\""),expect(a("key",new Date("2014-12-28T16:46:06.962Z"),!1,!0)).toBe(" key=\"2014-12-28T16:46:06.962Z\""),expect(a("key",new Date("2014-12-28T16:46:06.962Z"),!0,!1)).toBe(" key=\"2014-12-28T16:46:06.962Z\""),expect(a("key",new Date("2014-12-28T16:46:06.962Z"),!1,!1)).toBe(" key=\"2014-12-28T16:46:06.962Z\""),expect(a("key",{toJSON:function(){return"bar"}},!0,!1)).toBe(" key=\"bar\""),expect(a("key",{toJSON:function(){return{foo:"bar"}}},!0,!1)).toBe(" key=\"{&quot;foo&quot;:&quot;bar&quot;}\""),expect(a("key",{foo:"bar"},!0,!0)).toBe(" key=\"{&quot;foo&quot;:&quot;bar&quot;}\""),expect(a("key",{foo:"bar"},!1,!0)).toBe(" key='{\"foo\":\"bar\"}'"),expect(a("key",{foo:"don't"},!0,!0)).toBe(" key=\"{&quot;foo&quot;:&quot;don't&quot;}\""),expect(a("key",{foo:"don't"},!1,!0)).toBe(" key='{\"foo\":\"don&#39;t\"}'"),expect(a("key",500,!0,!0)).toBe(" key=\"500\""),expect(a("key",500,!1,!0)).toBe(" key=\"500\""),expect(a("key",500,!0,!1)).toBe(" key=\"500\""),expect(a("key",500,!1,!1)).toBe(" key=\"500\""),expect(a("key","foo",!0,!0)).toBe(" key=\"foo\""),expect(a("key","foo",!1,!0)).toBe(" key=\"foo\""),expect(a("key","foo",!0,!1)).toBe(" key=\"foo\""),expect(a("key","foo",!1,!1)).toBe(" key=\"foo\""),expect(a("key","foo>bar",!0,!0)).toBe(" key=\"foo&gt;bar\""),expect(a("key","foo>bar",!1,!0)).toBe(" key=\"foo>bar\""),expect(a("key","foo>bar",!0,!1)).toBe(" key=\"foo&gt;bar\""),expect(a("key","foo>bar",!1,!1)).toBe(" key=\"foo>bar\""),b.toJSON=c}),addTest("attrs",function(a){// (obj, terse)
expect(a({foo:"bar"},!0)).toBe(" foo=\"bar\""),expect(a({foo:"bar"},!1)).toBe(" foo=\"bar\""),expect(a({foo:"bar",hoo:"boo"},!0)).toBe(" foo=\"bar\" hoo=\"boo\""),expect(a({foo:"bar",hoo:"boo"},!1)).toBe(" foo=\"bar\" hoo=\"boo\""),expect(a({foo:""},!0)).toBe(" foo=\"\""),expect(a({foo:""},!1)).toBe(" foo=\"\""),expect(a({class:""},!0)).toBe(""),expect(a({class:""},!1)).toBe(""),expect(a({class:["foo",{bar:!0}]},!0)).toBe(" class=\"foo bar\""),expect(a({class:["foo",{bar:!0}]},!1)).toBe(" class=\"foo bar\""),expect(a({class:["foo",{bar:!0}],foo:"bar"},!0)).toBe(" class=\"foo bar\" foo=\"bar\""),expect(a({foo:"bar",class:["foo",{bar:!0}]},!1)).toBe(" class=\"foo bar\" foo=\"bar\""),expect(a({style:"foo: bar;"},!0)).toBe(" style=\"foo: bar;\""),expect(a({style:"foo: bar;"},!1)).toBe(" style=\"foo: bar;\""),expect(a({style:{foo:"bar"}},!0)).toBe(" style=\"foo:bar;\""),expect(a({style:{foo:"bar"}},!1)).toBe(" style=\"foo:bar;\"")}),addTest("classes",function(a){expect(a(["foo","bar"])).toBe("foo bar"),expect(a([["foo","bar"],["baz","bash"]])).toBe("foo bar baz bash"),expect(a([["foo","bar"],{baz:!0,bash:!1}])).toBe("foo bar baz"),expect(a([["fo<o","bar"],{"ba>z":!0,bash:!1}],[!0,!1])).toBe("fo&lt;o bar ba>z")}),addTest("escape",function(a){expect(a("foo")).toBe("foo"),expect(a(10)).toBe(10),expect(a("foo<bar")).toBe("foo&lt;bar"),expect(a("foo&<bar")).toBe("foo&amp;&lt;bar"),expect(a("foo&<>bar")).toBe("foo&amp;&lt;&gt;bar"),expect(a("foo&<>\"bar")).toBe("foo&amp;&lt;&gt;&quot;bar"),expect(a("foo&<>\"bar\"")).toBe("foo&amp;&lt;&gt;&quot;bar&quot;")}),addTest("merge",function(a){expect(a({foo:"bar"},{baz:"bash"})).toEqual({foo:"bar",baz:"bash"}),expect(a([{foo:"bar"},{baz:"bash"},{bing:"bong"}])).toEqual({foo:"bar",baz:"bash",bing:"bong"}),expect(a({class:"bar"},{class:"bash"})).toEqual({class:["bar","bash"]}),expect(a({class:["bar"]},{class:"bash"})).toEqual({class:["bar","bash"]}),expect(a({class:"bar"},{class:["bash"]})).toEqual({class:["bar","bash"]}),expect(a({class:"bar"},{class:null})).toEqual({class:["bar"]}),expect(a({class:null},{class:["bar"]})).toEqual({class:["bar"]}),expect(a({},{class:["bar"]})).toEqual({class:["bar"]}),expect(a({class:["bar"]},{})).toEqual({class:["bar"]}),expect(a({style:"foo:bar"},{style:"baz:bash"})).toEqual({style:"foo:bar;baz:bash;"}),expect(a({style:"foo:bar;"},{style:"baz:bash"})).toEqual({style:"foo:bar;baz:bash;"}),expect(a({style:{foo:"bar"}},{style:"baz:bash"})).toEqual({style:"foo:bar;baz:bash;"}),expect(a({style:{foo:"bar"}},{style:{baz:"bash"}})).toEqual({style:"foo:bar;baz:bash;"}),expect(a({style:"foo:bar"},{style:null})).toEqual({style:"foo:bar;"}),expect(a({style:"foo:bar;"},{style:null})).toEqual({style:"foo:bar;"}),expect(a({style:{foo:"bar"}},{style:null})).toEqual({style:"foo:bar;"}),expect(a({style:null},{style:"baz:bash"})).toEqual({style:"baz:bash;"}),expect(a({style:null},{style:"baz:bash"})).toEqual({style:"baz:bash;"}),expect(a({style:null},{style:"baz:bash"})).toEqual({style:"baz:bash;"}),expect(a({},{style:"baz:bash"})).toEqual({style:"baz:bash;"}),expect(a({},{style:"baz:bash"})).toEqual({style:"baz:bash;"}),expect(a({},{style:"baz:bash"})).toEqual({style:"baz:bash;"})}),addTest("style",function(a){expect(a(null)).toBe(""),expect(a("")).toBe(""),expect(a("foo: bar")).toBe("foo: bar"),expect(a("foo: bar;")).toBe("foo: bar;"),expect(a({foo:"bar"})).toBe("foo:bar;"),expect(a({foo:"bar",baz:"bash"})).toBe("foo:bar;baz:bash;")}),describe("rethrow",()=>{it("should rethrow error",()=>{const a=new Error;try{runtime.rethrow(a,"foo.pug",3)}catch(b){return void expect(b).toBe(a)}throw new Error("expected rethrow to throw")}),it("should rethrow error with str",()=>{const a=new Error;try{runtime.rethrow(a,"foo.pug",3,"hello world")}catch(b){return expect(b).toBe(a),void expect(b.message.trim()).toBe(`
foo.pug:3
    1| hello world`.trim())}throw new Error("expected rethrow to throw")}),it("should handle bad arguments gracefully",()=>{const a=new Error("hello world");try{runtime.rethrow(a,"foo.pug",3,{not:"a string"})}catch(b){return expect(b).toBe(a),void expect(b.message).toBe("hello world - could not read from foo.pug (str.split is not a function) on line 3")}throw new Error("expected rethrow to throw")})});