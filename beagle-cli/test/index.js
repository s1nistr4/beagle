"use strict";var _fs=_interopRequireDefault(require("fs")),_path=_interopRequireDefault(require("path")),_assert=_interopRequireDefault(require("assert")),_child_process=_interopRequireDefault(require("child_process")),_mkdirp=require("mkdirp"),_rimraf=require("rimraf");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}// Sets directory to output coverage data to
// Incremented every time getRunner() is called.
var covCount=1,isIstanbul=process.env.running_under_istanbul;/*
 * I/O utilities for temporary directory.
 */function j(a){return _path.default.join.apply(_path.default,a)}function t(a){a=Array.isArray(a)?a:[a];var b=[__dirname,"temp"].concat(a);return j(b)}function r(a){return _fs.default.readFileSync(t(a),"utf8")}function rs(a){return _fs.default.createReadStream(t(a))}function w(a,b){return _fs.default.writeFileSync(t(a),b)}function a(a,b){return _fs.default.appendFileSync(t(a),b)}function u(a){return _fs.default.unlinkSync(t(a))}/**
 * Gets an array containing the routine to run the pug CLI. If this file is
 * being processed with istanbul then this function will return a routine
 * asking istanbul to store coverage data to a unique directory
 * (cov-pt<covCount>/).
 */function getRunner(){var a=j([__dirname,"..","index.js"]);return isIstanbul?["istanbul",["cover","--print","none","--report","none","--root",process.cwd(),"--dir",process.cwd()+"/cov-pt"+covCount++,a,"--"]]:[process.argv[0],[a]]}/*
 * Run Pug CLI.
 *
 * @param  args     Array of arguments
 * @param [stdin]   Stream of standard input
 * @param  callback Function to call when the process finishes
 */function run(a,b,c){2===arguments.length&&(c=b,b=null);var d=getRunner(),e=_child_process.default.execFile(d[0],d[1].concat(a),{cwd:t([])},c);b&&b.pipe(e.stdin)}/**
 * Set timing limits for a test case
 */function timing(a){isIstanbul?(a.timeout(2e4),a.slow(3e3)):(a.timeout(12500),a.slow(2e3))}/*
 * Make temporary directories
 *//*
 * CLI utilities
 */_rimraf.rimraf.sync(t([])),_mkdirp.mkdirp.sync(t(["_omittedDir"])),_mkdirp.mkdirp.sync(t(["depwatch"])),_mkdirp.mkdirp.sync(t(["inputs","level-1-1"])),_mkdirp.mkdirp.sync(t(["inputs","level-1-2"])),_mkdirp.mkdirp.sync(t(["outputs","level-1-1"])),_mkdirp.mkdirp.sync(t(["outputs","level-1-2"])),describe("miscellanea",function(){timing(this),it("--version",function(a){run(["-V"],function(b,c){b&&a(b),_assert.default.equal(c.trim(),"pug version: "+require("pug/package.json").version+"\npug-cli version: "+require("../package.json").version),run(["--version"],function(b,c){b&&a(b),_assert.default.equal(c.trim(),"pug version: "+require("pug/package.json").version+"\npug-cli version: "+require("../package.json").version),a()})})}),it("--help",function(a){// only check that it doesn't crash
run(["-h"],function(b){b&&a(b),run(["--help"],function(b){b&&a(b),a()})})}),it("Omits files starting with an underscore",function(a){w("_omitted.pug",".foo bar"),w("_omitted.html","<p>output not written</p>"),run(["_omitted.pug"],function(b){if(b)return a(b);var c=r("_omitted.html");(0,_assert.default)("<p>output not written</p>"===c),a()})}),it("Omits directories starting with an underscore",function(a){w("_omittedDir/file.pug",".foo bar"),w("_omittedDir/file.html","<p>output not written</p>"),run(["--no-debug","_omittedDir/file.pug"],function(b){if(b)return a(b);var c=r("_omittedDir/file.html");_assert.default.equal(c,"<p>output not written</p>"),a()})})}),describe("HTML output",function(){timing(this),it("works",function(a){w("input.pug",".foo bar"),w("input.html","<p>output not written</p>"),run(["--no-debug","input.pug"],function(b){if(b)return a(b);var c=r("input.html");(0,_assert.default)("<div class=\"foo\">bar</div>"===c),a()})}),it("--extension",function(a){w("input.pug",".foo bar"),w("input.special-html","<p>output not written</p>"),run(["--no-debug","-E","special-html","input.pug"],function(b){if(b)return a(b);var c=r("input.special-html");(0,_assert.default)("<div class=\"foo\">bar</div>"===c),a()})}),it("--basedir",function(a){w("input.pug","extends /dependency1.pug"),w("input.html","<p>output not written</p>"),run(["--no-debug","-b",j([__dirname,"dependencies"]),"input.pug"],function(b){if(b)return a(b);var c=r("input.html");_assert.default.equal(c,"<html><body></body></html>"),a()})}),context("--obj",function(){it("JavaScript syntax works",function(a){w("input.pug",".foo= loc"),w("input.html","<p>output not written</p>"),run(["--no-debug","--obj","{'loc':'str'}","input.pug"],function(b){if(b)return a(b);var c=r("input.html");(0,_assert.default)("<div class=\"foo\">str</div>"===c),a()})}),it("JavaScript syntax does not accept UTF newlines",function(a){w("input.pug",".foo= loc"),w("input.html","<p>output not written</p>"),run(["--no-debug","--obj","{'loc':'st\u2028r'}","input.pug"],function(b){return b?void a():a(new Error("expecting error"))})}),it("JSON syntax accept UTF newlines",function(a){w("input.pug",".foo= loc"),w("input.html","<p>output not written</p>"),run(["--no-debug","--obj","{\"loc\":\"st\u2028r\"}","input.pug"],function(b){if(b)return a(b);var c=r("input.html");_assert.default.equal(c,"<div class=\"foo\">st\u2028r</div>"),a()})}),it("JSON file",function(a){w("obj.json","{\"loc\":\"str\"}"),w("input.pug",".foo= loc"),w("input.html","<p>output not written</p>"),run(["--no-debug","--obj","obj.json","input.pug"],function(b){if(b)return a(b);var c=r("input.html");(0,_assert.default)("<div class=\"foo\">str</div>"===c),a()})}),it("JavaScript module",function(a){w("obj.js","module.exports = {loc: \"str\"};"),w("input.pug",".foo= loc"),w("input.html","<p>output not written</p>"),run(["--no-debug","--obj","obj.js","input.pug"],function(b){if(b)return a(b);var c=r("input.html");(0,_assert.default)("<div class=\"foo\">str</div>"===c),a()})})}),it("stdio",function(a){w("input.pug",".foo bar"),run(["--no-debug"],rs("input.pug"),function(b,c){return b?a(b):void((0,_assert.default)("<div class=\"foo\">bar</div>"===c),a())})}),context("--out",function(){it("works",function(a){w("input.pug",".foo bar"),w("input.html","<p>output not written</p>"),run(["--no-debug","--out","outputs","input.pug"],function(b){if(b)return a(b);var c=r(["outputs","input.html"]);(0,_assert.default)("<div class=\"foo\">bar</div>"===c),a()})}),it("works when input is a directory",function(a){w(["inputs","input.pug"],".foo bar 1"),w(["inputs","level-1-1","input.pug"],".foo bar 1-1"),w(["inputs","level-1-2","input.pug"],".foo bar 1-2"),w(["outputs","input.html"],"BIG FAT HEN 1"),w(["outputs","level-1-1","input.html"],"BIG FAT HEN 1-1"),w(["outputs","level-1-2","input.html"],"BIG FAT HEN 1-2"),run(["--no-debug","--hierarchy","--out","outputs","inputs"],function(b){if(b)return a(b);var c=r(["outputs","input.html"]);(0,_assert.default)("<div class=\"foo\">bar 1</div>"===c);var c=r(["outputs","level-1-1","input.html"]);(0,_assert.default)("<div class=\"foo\">bar 1-1</div>"===c);var c=r(["outputs","level-1-2","input.html"]);(0,_assert.default)("<div class=\"foo\">bar 1-2</div>"===c),a()})})}),it("--silent",function(a){w("input.pug",".foo bar"),w("input.html","<p>output not written</p>"),run(["--no-debug","-s","input.pug"],function(b,c){if(b)return a(b);var d=r("input.html");_assert.default.equal(d,"<div class=\"foo\">bar</div>"),_assert.default.equal(c,""),w("input.html","<p>output not written</p>"),run(["--no-debug","--silent","input.pug"],function(b,c){if(b)return a(b);var d=r("input.html");_assert.default.equal(d,"<div class=\"foo\">bar</div>"),_assert.default.equal(c,""),a()})})})}),describe("client JavaScript output",function(){timing(this),it("works",function(a){w("input.pug",".foo bar"),w("input.js","throw new Error(\"output not written\");"),run(["--no-debug","--client","input.pug"],function(b){if(b)return a(b);var c=Function("",r("input.js")+";return template;")();(0,_assert.default)("<div class=\"foo\">bar</div>"===c()),a()})}),it("--name",function(a){w("input.pug",".foo bar"),w("input.js","throw new Error(\"output not written\");"),run(["--no-debug","--client","--name","myTemplate","input.pug"],function(b){if(b)return a(b);var c=Function("",r("input.js")+";return myTemplate;")();(0,_assert.default)("<div class=\"foo\">bar</div>"===c()),a()})}),it("--name --extension",function(a){w("input.pug",".foo bar"),w("input.special-js","throw new Error(\"output not written\");"),run(["--no-debug","--client","-E","special-js","input.pug"],function(b){if(b)return a(b);var c=Function("",r("input.special-js")+";return template;")();(0,_assert.default)("<div class=\"foo\">bar</div>"===c()),a()})}),it("stdio",function(a){w("input.pug",".foo bar"),w("input.js","throw new Error(\"output not written\");"),run(["--no-debug","--client"],rs("input.pug"),function(b,c){if(b)return a(b);var d=Function("",c+";return template;")();(0,_assert.default)("<div class=\"foo\">bar</div>"===d()),a()})}),it("--name-after-file",function(a){w("input-file.pug",".foo bar"),w("input-file.js","throw new Error(\"output not written\");"),run(["--no-debug","--client","--name-after-file","input-file.pug"],function(b){if(b)return a(b);var c=Function("",r("input-file.js")+";return inputFileTemplate;")();return(0,_assert.default)("<div class=\"foo\">bar</div>"===c()),a()})}),it("--name-after-file \xB7InPuTwIthWEiRdNaMME.pug",function(a){w("\xB7InPuTwIthWEiRdNaMME.pug",".foo bar"),w("\xB7InPuTwIthWEiRdNaMME.js","throw new Error(\"output not written\");"),run(["--no-debug","--client","--name-after-file","\xB7InPuTwIthWEiRdNaMME.pug"],function(b){if(b)return a(b);var c=Function("",r("\xB7InPuTwIthWEiRdNaMME.js")+";return InputwithweirdnammeTemplate;")();return(0,_assert.default)("<div class=\"foo\">bar</div>"===c()),a()})})}),describe("--watch",function(){function a(){c="";b&&(b.stderr.removeAllListeners("data"),b.stdout.removeAllListeners("data"),b.removeAllListeners("error"),b.removeAllListeners("close"))}var b,c="";after(function(){a(),b.kill("SIGINT"),b=null}),beforeEach(a),afterEach(function(a){// pug --watch can only detect changes that are at least 1 second apart
setTimeout(a,1e3)}),it("pass 1: initial compilation",function(d){timing(this),w("input-file.pug",".foo bar"),w("input-file.js","throw new Error(\"output not written (pass 1)\");");var e=getRunner();e[1].push("--no-debug","--client","--name-after-file","--watch","input-file.pug"),b=_child_process.default.spawn(e[0],e[1],{cwd:t([])}),b.stdout.setEncoding("utf8"),b.stderr.setEncoding("utf8"),b.on("error",d),b.stdout.on("data",function(b){if(c+=b,/rendered/.test(c)){a();var e=Function("",r("input-file.js")+";return inputFileTemplate;")();return(0,_assert.default)("<div class=\"foo\">bar</div>"===e()),d()}})}),it("pass 2: change the file",function(d){w("input-file.js","throw new Error(\"output not written (pass 2)\");"),b.on("error",d),b.stdout.on("data",function(b){if(c+=b,/rendered/.test(c)){a();var e=Function("",r("input-file.js")+";return inputFileTemplate;")();return(0,_assert.default)("<div class=\"foo\">baz</div>"===e()),d()}}),w("input-file.pug",".foo baz")}),it("pass 3: remove the file then add it back",function(d){w("input-file.js","throw new Error(\"output not written (pass 3)\");"),b.on("error",d),b.stdout.on("data",function(b){if(c+=b,/rendered/.test(c)){a();var e=Function("",r("input-file.js")+";return inputFileTemplate;")();return(0,_assert.default)("<div class=\"foo\">bat</div>"===e()),d()}}),u("input-file.pug"),setTimeout(function(){w("input-file.pug",".foo bat")},250)}),it("pass 4: intentional errors in the pug file",function(a){var d="",e=!1;b.on("error",a),b.on("close",function(){return e=!0,a(new Error("Pug should not terminate in watch mode"))}),b.stdout.on("data",function(b){if(c+=b,/rendered/.test(c))return c="",a(new Error("Pug compiles an erroneous file w/o error"))}),b.stderr.on("data",function(c){if(d+=c,!!/Invalid indentation/.test(d)){d="";var f=Function("",r("input-file.js")+";return inputFileTemplate;")();(0,_assert.default)("<div class=\"foo\">bat</div>"===f()),b.stderr.removeAllListeners("data"),b.stdout.removeAllListeners("data"),b.removeAllListeners("error"),b.removeAllListeners("exit"),setTimeout(function(){e||a()},100)}}),w("input-file.pug","div\n  div\n\tarticle")})}),describe("--watch with dependencies",function(){function b(){d="";c&&(c.stderr.removeAllListeners("data"),c.stdout.removeAllListeners("data"),c.removeAllListeners("error"),c.removeAllListeners("close"))}var c,d="";before(function(){function a(a){w(["depwatch",a],_fs.default.readFileSync(j([__dirname,"dependencies",a])))}a("include2.pug"),a("dependency2.pug"),a("dependency3.pug")}),after(function(){b(),c.kill("SIGINT"),c=null}),beforeEach(b),afterEach(function(a){// pug --watch can only detect changes that are at least 1 second apart
setTimeout(a,1e3)}),it("pass 1: initial compilation",function(a){timing(this),w(["depwatch","include2.html"],"output not written (pass 1)"),w(["depwatch","dependency2.html"],"output not written (pass 1)");var e=getRunner();e[1].push("--watch","include2.pug","dependency2.pug"),c=_child_process.default.spawn(e[0],e[1],{cwd:t("depwatch")}),c.stdout.setEncoding("utf8"),c.stderr.setEncoding("utf8"),c.on("error",a),c.stdout.on("data",function(c){if(d+=c,2===(d.match(/rendered/g)||[]).length){b();var e=r(["depwatch","include2.html"]);return _assert.default.equal(e.trim(),"<strong>dependency3</strong>"),e=r(["depwatch","dependency2.html"]),_assert.default.equal(e.trim(),"<strong>dependency3</strong>"),a()}})}),it("pass 2: change a dependency",function(e){timing(this),w(["depwatch","include2.html"],"output not written (pass 2)"),w(["depwatch","dependency2.html"],"output not written (pass 2)"),c.on("error",e),c.stdout.on("data",function(a){if(d+=a,2===(d.match(/rendered/g)||[]).length){b();var c=r(["depwatch","include2.html"]);return _assert.default.equal(c.trim(),"<strong>dependency3</strong><p>Hey</p>"),c=r(["depwatch","dependency2.html"]),_assert.default.equal(c.trim(),"<strong>dependency3</strong><p>Hey</p>"),e()}}),a(["depwatch","dependency2.pug"],"\np Hey\n")}),it("pass 3: change a deeper dependency",function(e){timing(this),w(["depwatch","include2.html"],"output not written (pass 3)"),w(["depwatch","dependency2.html"],"output not written (pass 3)"),c.on("error",e),c.stdout.on("data",function(a){if(d+=a,2===(d.match(/rendered/g)||[]).length){b();var c=r(["depwatch","include2.html"]);return _assert.default.equal(c.trim(),"<strong>dependency3</strong><p>Foo</p><p>Hey</p>"),c=r(["depwatch","dependency2.html"]),_assert.default.equal(c.trim(),"<strong>dependency3</strong><p>Foo</p><p>Hey</p>"),e()}}),a(["depwatch","dependency3.pug"],"\np Foo\n")}),it("pass 4: change main file",function(e){timing(this),w(["depwatch","include2.html"],"output not written (pass 4)"),w(["depwatch","dependency2.html"],"output not written (pass 4)"),c.on("error",e),c.stdout.on("data",function(a){if(d+=a,1===(d.match(/rendered/g)||[]).length){b();var c=r(["depwatch","include2.html"]);return _assert.default.equal(c.trim(),"<strong>dependency3</strong><p>Foo</p><p>Hey</p><p>Baz</p>"),c=r(["depwatch","dependency2.html"]),_assert.default.equal(c.trim(),"output not written (pass 4)"),e()}}),a(["depwatch","include2.pug"],"\np Baz\n")})});